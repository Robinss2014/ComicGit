<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>ComicGit</title>
		<!-- styles -->
		<link rel="stylesheet" type="text/css" href="/css/app.css" />
		<link rel="stylesheet" type="text/css" href="/css/bootstrap/bootstrap.min.css" />
		<link rel="stylesheet" type="text/css" href="/css/font-awesome.css" />
		<!-- library -->
		<script type="text/javascript" src="/js/lib/fabric.js"></script>
		<script type="text/javascript" src="/js/lib/jquery.min.js"></script>
		<script type="text/javascript" src="/js/lib/modernizr.custom.05406.js"></script>
	</head>
	<body>
		<!-- wrap -->
		<div class="wrap">
			<!-- header -->
			<header class="header">
				<div class="container text-center bottomShadow">
					<div class="row">
						<div class="col-xs-12">
							<h1>Edit Panel</h1>
						</div>
					</div>
					<div class="row">
						<div class="col-xs-4 col-xs-offset-4">
							<a class="btn btn-default btn-lg btn-block" href="/index" role="button">Go HOME</a>
							<br>
						</div>
					</div>
				</div><!-- /.bottomShadow -->
			</header><!-- /.header -->
			
			<!-- main content -->
			<div class="container main">
				<div id="main">
					<br>
					<br>
					<div class="row">
						<div class="col-md-8">
							<div id="canvas-container">
								<canvas id="canvas" width="700px" height="550px"></canvas>
							</div>
						</div>
						<div class="col-md-4">
							<h3 class="text-center"> Drawings/Settings</h3>
							<br>
							<div class="form-group">
								<div class="row">
									<div class="col-sm-2">
										<label for="draw">Draw:</label>
									</div>
									<div class="col-sm-3">
										<button class="btn btn-default" id="draw">Start</button>
									</div>
									<div class="col-sm-5 col-offset-sm-2">
										<label for="clear-canvas">Clear the canvas: </label>
									</div>
									<div class="col-sm-2">
										<button class="btn btn-default" id="clear-canvas">Clear</button>
									</div>
								</div>
							</div>
							<div class="form-group">
								<div class="row">
									<div class="col-sm-4">
										<label for="drawing-line-width">Line width:</label><span class="info"> 10 </span>
									</div>
									<div class="col-sm-8">
										<input type="range" value="10" min="1" maxcdn="50" id="drawing-line-width">
									</div>
								</div>
							</div>
							<div class="form-group">
								<div class="row">
									<div class="col-sm-5 col-offset-sm-1">
										<label for="drawing-line-color">Line/Text color:</label>
									</div>
									<div class="col-sm-6">
										<input type="color" id="drawing-line-color">
									</div>
								</div>
							</div>
							<div class="form-group">
								<div class="row">
									<div class="col-sm-2">
										<label for="create-text-obj">Text:</label>
									</div>
									<div class="col-sm-6 col-offset-sm-1">
										<textarea id="text-input" rows="1" ></textarea>
									</div>
									<div class="col-sm-2 col-offset-sm-1">
										<button id="create-text-obj">Add</button>
									</div>
								</div>
							</div>
							<div class="form-group">
								<label for="drag-drop">Drag:</label>
								<!--local resources: Need to add controller to load the images-->
								<div id="images">
									<img style="cursor: pointer" width="80px" height="80px" id="img1" class="img-thumbnail" src="/assets/Stickman.svg" alt="" value="" draggable="true">
									<img style="cursor: pointer" width="80px" height="80px" id="img2" class="img-thumbnail" src="/assets/Vitaly-Milonov-by-Rones.svg" alt="" value="" draggable="true">
									<img style="cursor: pointer" width="80px" height="80px" id="img3" class="img-thumbnail" src="/assets/thought-bubble.svg" alt="" value="" draggable="true">
									<img style="cursor: pointer" width="80px" height="80px" id="img4" class="img-thumbnail" src="/assets/nicubunu-Callout-cloud-center.svg" alt="" value="" draggable="true">
								</div>

							</div>
							<div class="form-group">
								<label for="remove-object">First select any object then: </label>
								<button class="btn btn-default" id="remove-object">Remove</button>
							</div>
							<div class="form-group">
								<label for="save-to-server">save to server:</label>
								<div id="storyflowdiv"></div>
								<div id="parentpaneldiv"></div>
								<div id="paneldiv"></div>
								<button class="btn btn-default" id="save-to-server">save</button>
							</div>
							<div class="form-group" id="save-local-button">
								<label for="save-to-local">Save to local disk:</label>
								<button class="btn btn-default" id="save-to-local">Save</button>
							</div>
						</div>
					</div>
					<br>
					<br>
				</div>
			</div><!-- /.main -->
		</div><!-- /.wrap -->

		<!-- footer -->
		<footer class="footer">
			<div class="container topShadow">
				<div class="row text-center">
					<div class="col-xs-12">
						<br>
						ComicGit: a CSC690 final project by <a href="http://robinss.com" target="_blank">Sisi Wei</a> and Sylvain Ribstein<br>
						Documentation on <a href="https://docs.google.com/document/d/1Fq9K9efgS_MVmtmGSNIfi8MJMKnA9rFwhu78Fg5DSU0/edit?usp=sharing" target="_blank">Google Doc</a><br>
						Code on <a href="https://github.com/Robinss2014/ComicGit" target="_blank">GitHub</a><br>
					</div>
				</div>
			</div>
		</footer><!-- /.footer -->
	</body>
	<script>
	$(document).ready(function(){
		var u=$(location).attr('href').split('/');
		if(u[u.length-1]===""){
			u=u.slice(0,u.length-1);
		}
		var last;
		var sf;
		var newsf=false;
		if(u[u.length-1]==="editpanel"){
			newsf=true;
			$("#storyflowdiv").append('name storyflow <input id="storyflow" for="save-to-server">');
		}
		else{
			sf=u[u.length-2];
			last=u[u.length-1];
			$("#storyflowdiv").append('<p id="storyflow" for="save-to-server">storyflow : '+sf+'</p>');
			$("#parentpaneldiv").append('<p id="parentpanel" for="save-to-server">previous panel : '+last+'</p>');
			$("#paneldiv").append('name panel <input id="panel" type="text" for="save-to-server">');
		}

		// initialize the canvas and canvas-container
		var canvas = new fabric.Canvas('canvas', {
			backgroundColor: 'grey',
			hoverCursor: 'pointer',
		});
		var canvasContainer = document.getElementById('canvas-container');

		// clear canvas
		var clearCanvas = $('#clear-canvas')[0];
		clearCanvas.onclick = function() {
			canvas.clear(); 
		};

		// some default images on the canvas
		canvas.add(new fabric.Rect({
			left: 100,
			top: 100,
			width: 75,
			height: 50,
			fill: 'green',
			stroke: 'black',
			strokeWidth: 3,
			padding: 10
		}));

		canvas.add(new fabric.Circle({
			left: 200,
			top: 200,
			radius: 30,
			fill: 'gray',
			stroke: 'black',
			strokeWidth: 3
		}));

		// free drawing mode		 
		var freeDrawing=$('#draw')[0];
		draw.onclick = function(){
			if(canvas.isDrawingMode){
				canvas.isDrawingMode=false;
				draw.innerHTML = "Start";
			}else{
				canvas.isDrawingMode=true;
				draw.innerHTML = "Stop";
				canvas.freeDrawingBrush.width =10;
			}
		};

		// Add text into canvas
		var createText=$('#create-text-obj')[0];
		createText.onclick = function(){
			var text = $('#text-input').val();
			create_text_obj(text);
		};

		function create_text_obj(text) {
			var text_obj = new fabric.Text(text, {
				fontFamily: 'Delicious_500',
				left: 40,
				top: 20,
				fontSize: 80,
				textAlign: "left"
			});

			canvas.add(text_obj);
		};

		// drag and drop image into canvas
		function handleDragStart(e) {
			[].forEach.call(images, function (img) {
				img.classList.remove('img_dragging');
			});
			this.classList.add('img_dragging');
		}

		function handleDragOver(e) {
			if (e.preventDefault) {
				e.preventDefault(); // Necessary. Allows us to drop.
			}

			e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
			// NOTE: comment above refers to the article (see top) -natchiketa

			return false;
		}

		function handleDragEnter(e) {
			// this / e.target is the current hover target.
				this.classList.add('over');
		}

		function handleDragLeave(e) {
			this.classList.remove('over'); // this / e.target is previous target element.
		}

		function handleDrop(e) {
			// this / e.target is current target element.

				if (e.stopPropagation) {
					e.stopPropagation(); // stops the browser from redirecting.
				}

			var img = document.querySelector('#images img.img_dragging');

			console.log('event: ', e);

			var newImage = new fabric.Image(img, {
				width: img.width,
				height: img.height,
				// Set the center of the new object based on the event coordinates relative
				// to the canvas container.
					left: e.layerX,
				top: e.layerY
			});
			canvas.add(newImage);

			return false;
		}

		function handleDragEnd(e) {
			// this/e.target is the source node.
			    [].forEach.call(images, function (img) {
				    img.classList.remove('img_dragging');
			    });
		}

		if (Modernizr.draganddrop) {
			// Browser supports HTML5 DnD.

				// Bind the event listeners for the image elements
			var images = document.querySelectorAll('#images img');
			[].forEach.call(images, function (img) {
				img.addEventListener('dragstart', handleDragStart, false);
				img.addEventListener('dragend', handleDragEnd, false);
			});
			// Bind the event listeners for the canvas
			canvasContainer.addEventListener('dragenter', handleDragEnter, false);
			canvasContainer.addEventListener('dragover', handleDragOver, false);
			canvasContainer.addEventListener('dragleave', handleDragLeave, false);
			canvasContainer.addEventListener('drop', handleDrop, false);
		} else {
			// Replace with a fallback to a library solution.
				alert("This browser doesn't support the HTML5 Drag and Drop API.");
		}

		// change the line width
		var drawingLine=$('#drawing-line-width')[0];
		drawingLine.onchange=function(){
			canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;
			this.previousSibling.innerHTML = this.value;
		}

		// change the line color
		var drawingLineColor = $('#drawing-line-color')[0];
		drawingLineColor.onchange = function() {
			canvas.freeDrawingBrush.color = this.value;
		};

		// remove the object
		// 1. select an object first, then click remove button in the Drawings/Settings Menu
		// 2. Shortcut: select an object first, then press Delete on the keyboard
		var removeObj = $('#remove-object')[0];
		removeObj.onclick = function() {
			removeObject();
		};

		document.onkeydown = function(event) {
			var key = window.event ? window.event.keyCode : event.keyCode;
			// keyboard shortcut to remove an object
			if(key==46){
				console.log("Your keycode is: "+key);
				removeObject();
			}
		}

		function removeObject(){
			if(canvas.getActiveGroup()){
				canvas.getActiveGroup().forEachObject(function(o){ canvas.remove(o) });
				canvas.discardActiveGroup().renderAll();
			} else {
				canvas.remove(canvas.getActiveObject());
			}
		}

		// save the canvas to local disk
		var saveLocal=$('#save-to-local')[0];
		saveLocal.onclick=function(){
			// make the link. set the href and download. emulate dom click
			$('<a>').attr({href:canvas.toDataURL(),download:"test.png"})[0].click();
		};

		// save the canvas to server
		var saveServer=$('#save-to-server')[0];
		saveServer.onclick = function(){
			var panel;
			if(newsf){
				sf=$('#storyflow')[0].value;
				last=sf;
				panel=sf;
			}
			else{
				panel=$('#panel')[0].value;
			}
			var urlPost="/editpanel/savepanel/"+sf+"/"+last+"/"+panel;
			saveServer.innerHTML='sending canvas';
			$.post(urlPost,
				JSON.stringify(canvas),
				function(data){
					var ret = jQuery.parseJSON(data);
					saveServer.innerHTML=ret.upload;
				}
			);

			console.log(canvas);
			
		};
	});
	</script>
</html>
